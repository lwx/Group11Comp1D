module boolean ( //performs AND, OR, XOR, "A" LDR functions
//inputs from ALU
    input alufn[6],
    input a[8],  
    input b[8],  
//output to ALU
    output boole[8]
  ) {
var i; //variable index for each bit of boole output
  always {
    for (i=0; i<8; i++){ //for each bit    
    case(alufn[2:0]){ //input 3 bits
      b000:
        boole[i]=a[i]|b[i]; //OR
      b100:
        boole[i] = ~(a[i]|b[i]); //NOR
      b001:
        boole[i] = (a[i]&b[i]); //AND
      b101:
        boole[i]= ~(a[i]&b[i]); //NAND
      b010:
        boole[i] = (a[i]^b[i]); //XOR
      b110:
        boole[i] = ~(a[i]^b[i]); //XNOR
      
      default:
      boole[i]=b0; //output
  }
}
}
}